[[Translation:Main/en/AI:Introduction]]{{en/NoAI}}
To start, the language to write your AI in, is Squirrel. Squirrel is a very simple and C++ like scripting-language. For an introduction in Squirrel check the [[Main/en/AI:Squirrel|Squirrel Introduction]] page. The reason we picked Squirrel, is that it looks very similar to C++.

In this introduction we take you through the process of creating a basic AI. While doing so, we will explain to you the very basics you need to create an AI and an AI in OpenTTD. For advanced AI handling we suggest you to buy a good book. The end-result of this tutorial can be found back in the 'example' directories.

==Creating your own AI==
There are several ways to get started.

You may wish to download an existing AI and modify it if the license allows (at the time of this writing all known AI's were open source). You can start from "Wright AI" and build up from there. 

The guide assumes you wish to start your own AI from scratch. [[Main/en/AI:TestAI]] is an example of the minimal AI with users settings. You can examine or copy that code to see what you must have to get started. 

A general programming rule of the thumb is to write good documentation for your AI, so after a few days or even months you can easily remember what the functions are supposed to do. Splitting the AI into smaller, logical files will also help with organization. Some AI writers use Doxygen style comments to allow them to produce high quality documentation automatically.

===Required Squirrel Files ===
# Locate your openttd installation folder. On Windows, by default it is in C:\Program Files\OpenTTD, for Linux it's in /usr/share/games/openttd and for mac its (your username)/documents/openttd
# Create a new directory for your ai under the <code>ai</code> directory. For example you could create the directory <code>MyNewAI</code>
#* You could also create a new directory under the <code>content_download/ai</code> (located in your <code>~/.openttd</code> folder on Linux while it's in the <code>Documents/OpenTTD</code> folder of the user's directory on Windows), but this method is NOT recommended since you might overwrite your files if you put your AI on Bananas and, since it's located in a user's home, will only work for that particular user.
# Create a file called <code>info.nut</code>. This is important as the Squirrel loader looks for that and <code>main.nut</code> in all subdirectories. If it doesn't find <code>info.nut</code>, the directory is considered to be something else, and your AI won't be loaded.

Your directory layout should look like this now:
<pre>
$OpenTTD_Dir/
    | ai/
        | MyNewAI/
            | info.nut 
            | main.nut
</pre>

Open <code>info.nut</code> and then continue reading the next section.

==Register==

You want to let OpenTTD know you have an AI that wants to take over a company. For this, you need to add a class that extends <code>AIInfo</code>:

 class MyNewAI extends AIInfo {
   function GetAuthor()      { return "Newbie AI Writer"; }
   function GetName()        { return "MyNewAI"; }
   function GetDescription() { return "An example AI by following the tutorial at http://wiki.openttd.org/"; }
   function GetVersion()     { return 1; }
   function GetDate()        { return "2007-03-17"; }
   function CreateInstance() { return "MyNewAI"; }
   function GetShortName()   { return "XXXX"; }
   function GetAPIVersion()  { return "1.9"; }
 }

What this does is tell OpenTTD how your AI is called, its version, and other general information. After this you need to create an instance of the class.
Squirrel:

 /* Tell the core we are an AI */
 RegisterAI(MyNewAI());

This is enough to initialise your AI. But, we are not quite there yet to give it a first run. We don't have a real AI yet, only a piece of code that tells what your AI is, and who wrote it. So, let's make a class that will be our AI.

==Your First AI==

To do this, create a file <code>main.nut</code> in the same dir, and make a class that extends <code>AIController</code>. See [[Main/en/Coding style|coding style]] for formatting recommendations.

 class MyNewAI extends AIController 
 {
   function Start();
 }
 
 function MyNewAI::Start()
 {
   while (true) {
     AILog.Info("I am a very new AI with a ticker called MyNewAI and I am at tick " + this.GetTick());
     this.Sleep(50);
   }
 }

The first block creates the class extending <code>AIController</code>.The second blocks creates a <code>Start()</code> function, which is called once when your AI is started. If you exit from this function, your AI dies. Therefore we create a <code>while()</code> which never stops. 
You don't need to worry too much about your AI clogging the game by eating all the CPU of your computer (and thus stopping the game itself from running), the engine itself will sleep every X opcodes which forces fair scheduling and allows the game to run smoothly. You can however put the AI to sleep manually by calling the <code>Sleep()</code> command. You will see when we start this AI in a moment, that you get a print line in your console every 50 ticks.

Start a new game and look on the main game screen for AI Settings. From there select your AI to run. You will only need to restart the game any time you change the info.nut file. Be sure to change the start time on your AI so you don't have to sit around waiting on it.

'''Hint''':
On Windows Vista you may need to run <code>openttd.exe</code> as administrator. Either right click and choose "Run as Administrator" each time, or turn off UAC for Administrators ([http://www.howtogeek.com/howto/windows-vista/disable-user-account-controluac-for-administrators-only/]).
If OpenTTD is not run as administrator the AI directories will be invisible to the executable, and loading any AI will result in an "The AI named 'XYZ' is unknown or not suitable" error.

If you open the AI Debug Window, which can be found under the QuestionMark icon, you will see a nice line printing we are active. You can also manually start your newly created AI by typing the command
 start_ai MyNewAI
into the in-game console (opens with '''`''' key)

If you make code changes to anything other than info.nut you can use the console command <code>restart</code> to start the game over from the beginning. Or you can just use the "Reload AI" button on the AI Debug window.

Any errors that are found, both compile-time and run-time, are send to the AI Debug Window. If your info.nut doesn't load, you won't see the errors unless you enable the debug console from the command line of the game. '''-d script=5'''.


You can redirect the output to the in-game console by opening in-game console console and typing
 developer 2
Enable output of <code>print</code> and <code>AILog.*</code> statements from your AI by typing
 debug_level script=4

You can scroll the console window with SHIFT-PGUP, SHIFT-PGDOWN and SHIFT-(up/down)ARROW keys.

So, there you have your first AI. Of course now we need to add functions. For this we advise you continue to the next chapter [[Main/en/AI:Basics|Basics]]. You only have to know that all your code should go in <code>Start()</code>. One more thing you should know: never create global variables. Keep everything in your class instance. But this is just a house-rule and if you don't know what it means, it doesn't really matter at this point.